<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SecretSharingDotNet</name>
    </assembly>
    <members>
        <member name="T:SecretSharingDotNet.Cryptography.FinitePoint`1">
            <summary>
            Represents the support point of the polynomial
            </summary>
            <typeparam name="TNumber">Numeric data type (An integer type)</typeparam>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.FinitePoint`1.x">
            <summary>
            Saves the X coordinate
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.FinitePoint`1.y">
            <summary>
            Saves the Y coordinate
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.#ctor(SecretSharingDotNet.Math.Calculator{`0},System.Collections.Generic.ICollection{SecretSharingDotNet.Math.Calculator{`0}},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> struct.
            </summary>
            <param name="x">X coordinate as known as share index</param>
            <param name="polynomial">Polynomial</param>
            <param name="prime">The prime number given by the security level.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> struct.
            </summary>
            <param name="serialized">string representation of the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> struct</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serialized"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.#ctor(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> struct.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.FinitePoint`1.X">
            <summary>
            Gets the X coordinate
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.FinitePoint`1.Y">
            <summary>
            Gets the Y coordinate
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.op_Equality(SecretSharingDotNet.Cryptography.FinitePoint{`0},SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.op_Inequality(SecretSharingDotNet.Cryptography.FinitePoint{`0},SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.op_GreaterThan(SecretSharingDotNet.Cryptography.FinitePoint{`0},SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.op_LessThan(SecretSharingDotNet.Cryptography.FinitePoint{`0},SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.op_GreaterThanOrEqual(SecretSharingDotNet.Cryptography.FinitePoint{`0},SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.op_LessThanOrEqual(SecretSharingDotNet.Cryptography.FinitePoint{`0},SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.CompareTo(SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.Equals(SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            Determines whether this <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> and a specified <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to compare to this instance.</param>
            <returns><see langword="true"/> if the value of the value parameter is the same as this <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.Equals(System.Object)">
            <summary>
            Determines whether this structure and a specified object, which must also be a <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to compare to this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> and its value is the same as this instance; otherwise, <see langword="false"/>.
            If <paramref name="obj"/> is <see langword="null"/>, the method returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> structure.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.Evaluate(System.Collections.Generic.IEnumerable{SecretSharingDotNet.Math.Calculator{`0}},SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Evaluates polynomial (coefficient tuple) at x, used to generate a shamir pool.
            </summary>
            <param name="polynomial"></param>
            <param name="x"></param>
            <param name="prime">Mersenne prime greater or equal 5</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.ToHexString(System.Collections.Generic.IReadOnlyCollection{System.Byte})">
            <summary>
            Converts a byte collection to hexadecimal string.
            </summary>
            <param name="bytes"></param>
            <returns>human readable / printable string</returns>
            <remarks>
            Based on discussion on <see href="https://stackoverflow.com/questions/623104/byte-to-hex-string/5919521#5919521">stackoverflow</see>
            </remarks>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.FinitePoint`1.ToByteArray(System.String)">
            <summary>
            Converts a hexadecimal string to a byte array.
            </summary>
            <param name="hexString">hexadecimal string</param>
            <returns></returns>
        </member>
        <member name="T:SecretSharingDotNet.Cryptography.Secret`1">
            <summary>
            This class represents the secret including members to parse or convert it.
            </summary>
            <typeparam name="TNumber">Numeric data type (An integer data type)</typeparam>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.Secret`1.secretNumber">
            <summary>
            Saves the secret
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.#ctor(SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> class.
            </summary>
            <param name="secretNumber">A secret integer number represented by an <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="secretNumber"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> class.
            </summary>
            <param name="encoded">Secret encoded as base-64</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoded"/> is <see langword="null"/>, empty or consists exclusively of white-space characters</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Implicit(`0)~SecretSharingDotNet.Cryptography.Secret{`0}">
            <summary>
            Casts the <typeparamref name="TNumber"/> instance to an <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Implicit(SecretSharingDotNet.Cryptography.Secret{`0})~`0">
            <summary>
            Casts the <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance to an <typeparamref name="TNumber"/> instance
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Implicit(SecretSharingDotNet.Cryptography.Secret{`0})~SecretSharingDotNet.Math.Calculator{`0}">
            <summary>
            Casts the <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance to an <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Implicit(SecretSharingDotNet.Math.Calculator{`0})~SecretSharingDotNet.Cryptography.Secret{`0}">
            <summary>
            Casts the <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance to an <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Implicit(System.String)~SecretSharingDotNet.Cryptography.Secret{`0}">
            <summary>
            Casts the <see cref="T:System.String"/> instance to an <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Equality(SecretSharingDotNet.Cryptography.Secret{`0},SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Equality operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>Returns <see langword="true"/> if its operands are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_Inequality(SecretSharingDotNet.Cryptography.Secret{`0},SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Inequality operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>Returns <see langword="true"/> if its operands are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_GreaterThan(SecretSharingDotNet.Cryptography.Secret{`0},SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Greater than operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_LessThan(SecretSharingDotNet.Cryptography.Secret{`0},SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Less than operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_GreaterThanOrEqual(SecretSharingDotNet.Cryptography.Secret{`0},SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Greater than or equal operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.op_LessThanOrEqual(SecretSharingDotNet.Cryptography.Secret{`0},SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Less than or equal operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.CompareTo(SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Compares this instance to a specified <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> and returns an indication of their relative values.
            </summary>
            <param name="other">An <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance to compare with this instance.</param>
            <returns>A value that indicates the relative order of the <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instances being compared.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.Equals(SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Determines whether this instance and an<paramref name="other"/> specified <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance are equal.
            </summary>
            <param name="other">The <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance to compare</param>
            <returns><see langword="true"/> if the value of the <paramref name="other"/> parameter is the same as the value of this instance; otherwise <see langword="false"/>.
            If <paramref name="other"/> is <see langword="null"/>, the method returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> argument is a <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> object,
            and its value is equal to the value of the current <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> structure.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.ToString">
            <summary>
            Converts the value of <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> structure to its equivalent <see cref="T:System.String"/> representation
            that is unicode encoded.
            </summary>
            <returns><see cref="T:System.String"/> representation of <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.ToBase64">
            <summary>
            Converts the value of <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> structure to its equivalent <see cref="T:System.String"/> representation
            that is encoded with base-64 digits.
            </summary>
            <returns>The <see cref="T:System.String"/> representation in base 64</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Secret`1.ParseBase64(System.String)">
            <summary>
            Parses a base-64 encoded secret and returns an <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance.
            </summary>
            <param name="encoded">Secret encoded as base-64</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoded"/> is <see langword="null"/>, empty or  consists exclusively of white-space characters</exception>
            <returns>An <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> instance.</returns>
        </member>
        <member name="T:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1">
            <summary>
            Shamir's secret sharing algorithm
            </summary>
            <typeparam name="TNumber">Numeric data type</typeparam>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.securityLevels">
            <summary>
            Saves the known security levels (Mersenne prime exponents)
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.securityLevel">
            <summary>
            Saves the security level
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.mersennePrime">
            <summary>
            Saves the calculated mersenne prime
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.extendedGcd">
            <summary>
            Saves the extended greatest common divisor algorithm
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.#ctor(SecretSharingDotNet.Math.IExtendedGcdAlgorithm{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1"/> class.
            </summary>
            <param name="extendedGcd">Extended greatest common divisor algorithm</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.#ctor(SecretSharingDotNet.Math.IExtendedGcdAlgorithm{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1"/> class.
            </summary>
            <param name="extendedGcd">Extended greatest common divisor algorithm</param>
            <param name="securityLevel">Security level (in number of bits). Minimum is 5.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The security level is lower than 5 or greater than 43112609.</exception>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.SecurityLevel">
            <summary>
            Gets or sets the security level
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" accessor="set">Value is lower than 5 or greater than 43112609.</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.MakeShares(`0,`0)">
            <summary>
            Generates a random shamir pool, returns the random secret and the share points.
            </summary>
            <param name="numberOfMinimumShares">Minimum number of shared secrets for reconstruction</param>
            <param name="numberOfShares">Maximum number of shared secrets</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numberOfMinimumShares"/> is lower than 2 or greater than <paramref name="numberOfShares"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Security Level is not initialized!</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.MakeShares(`0,`0,SecretSharingDotNet.Cryptography.Secret{`0})">
            <summary>
            Generates a random shamir pool, returns the specified <paramref name="secret"/> and the share points.
            </summary>
            <param name="numberOfMinimumShares">Minimum number of shared secrets for reconstruction</param>
            <param name="numberOfShares">Maximum number of shared secrets</param>
            <param name="secret">secret text as <see cref="T:SecretSharingDotNet.Cryptography.Secret`1"/> or see cref="string"/></param>
            <returns></returns>
            <remarks>This method modifies the <see cref="P:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.SecurityLevel"/> based on the <paramref name="secret"/> length</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="secret"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numberOfMinimumShares"/> is lower than 2 or greater than <paramref name="numberOfShares"/>.</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.CreatePolynomial(SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Creates a polynomial
            </summary>
            <param name="numberOfMinimumShares">Minimum number of shared secrets for reconstruction</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.CreateSharedSecrets(SecretSharingDotNet.Math.Calculator{`0},System.Collections.Generic.ICollection{SecretSharingDotNet.Math.Calculator{`0}})">
            <summary>
            Creates shared Secrets
            </summary>
            <param name="numberOfShares">Maximum number of shared secrets</param>
            <param name="polynomial"></param>
            <returns>A list of finite points representing the shared secrets</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.DivMod(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Computes numerator / denominator modulo prime.
            This means that the return value will be such that
            the following is true:
            denominator * DivMod(numerator, denominator, prime) % prime == numerator
            </summary>
            <param name="numerator"></param>
            <param name="denominator"></param>
            <param name="prime"></param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.Product(System.Collections.Generic.IEnumerable{SecretSharingDotNet.Math.Calculator{`0}})">
            <summary>
            Computes the mathematical product of a series of <paramref name="values"/>
            </summary>
            <param name="values"></param>
            <returns></returns>
            <remarks>Helper method for LagrangeInterpolate</remarks>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.LagrangeInterpolate(System.Collections.Generic.List{SecretSharingDotNet.Cryptography.FinitePoint{`0}},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Find the y-value for the given x, given n (x, y) points;
            k points will define a polynomial of up to kth order
            </summary>
            <param name="finitePoints"></param>
            <param name="prime">A prime number must be defined to avoid computation with real numbers. In fact it is finite field arithmetic.
            The prime number must be the same as used for the construction of shares.</param>
            <returns>The re-constructed secret.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.Reconstruction(System.String)">
            <summary>
            Recovers the secret from the given <paramref name="shares"/> (points with x and y on the polynomial)
            </summary>
            <param name="shares">Shares represented by <see cref="T:System.String"/> and separated by newline.</param>
            <returns>Re-constructed secret</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.Reconstruction(System.String[])">
            <summary>
            Recovers the secret from the given <paramref name="shares"/> (points with x and y on the polynomial)
            </summary>
            <param name="shares">Shares represented by <see cref="T:System.String"/> array.</param>
            <returns>Re-constructed secret</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.Reconstruction(SecretSharingDotNet.Cryptography.Shares{`0})">
            <summary>
            Recovers the secret from the given <paramref name="shares"/> (points with x and y on the polynomial)
            </summary>
            <param name="shares">For details <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/></param>
            <returns>Re-constructed secret</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.ShamirsSecretSharing`1.Reconstruction(SecretSharingDotNet.Cryptography.FinitePoint{`0}[])">
            <summary>
            Recovers the secret from the given <paramref name="shares"/> (points with x and y on the polynomial)
            </summary>
            <param name="shares">two or more shares</param>
            <returns>Re-constructed secret</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="shares"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="shares"/> is lower than 2.</exception>
        </member>
        <member name="T:SecretSharingDotNet.Cryptography.Shares`1">
            <summary>
            Represents a set of shares
            </summary>
            <typeparam name="TNumber">Numeric data type (An integer type)</typeparam>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.Shares`1.shareList">
            <summary>
            Saves a collection of shares.
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.Shares`1.syncRoot">
            <summary>
            Saves an object that can be used to synchronize access to the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/>
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.#ctor(System.Collections.Generic.IList{SecretSharingDotNet.Cryptography.FinitePoint{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> class.
            </summary>
            <param name="shares">A list of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shares"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.#ctor(SecretSharingDotNet.Cryptography.Secret{`0},System.Collections.Generic.IList{SecretSharingDotNet.Cryptography.FinitePoint{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> class.
            </summary>
            <param name="secret">The original secret which was split into <paramref name="shares"/>.</param>
            <param name="shares">A list of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="secret"/> or <paramref name="shares"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.OriginalSecret">
            <summary>
            Gets the original secret
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.Item1">
            <summary>
            Gets the original secret
            </summary>
            <remarks>Legacy property</remarks>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> associated with the specified index.
            </summary>
            <param name="i">The index of the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to get or set.</param>
            <returns></returns>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.Item2">
            <summary>
            Gets the shares.
            </summary>
            <remarks>Legacy property</remarks>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.OriginalSecretExists">
            <summary>
            Gets a value indicating whether or not the original secret is available.
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.op_Implicit(SecretSharingDotNet.Cryptography.Shares{`0})~System.Tuple{SecretSharingDotNet.Cryptography.Secret{`0},System.Collections.Generic.ICollection{SecretSharingDotNet.Cryptography.FinitePoint{`0}}}">
            <summary>
            Casts a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object to a <see cref="T:System.Tuple"/> object.
            </summary>
            <param name="shares">A <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.op_Implicit(SecretSharingDotNet.Cryptography.Shares{`0})~System.String[]">
            <summary>
            Casts a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object to a array of <see cref="T:System.String"/>s.
            </summary>
            <param name="shares">A <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.op_Implicit(SecretSharingDotNet.Cryptography.Shares{`0})~System.String">
            <summary>
             Casts a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object to a <see cref="T:System.String"/> object.
            </summary>
            <param name="shares">A <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.op_Implicit(System.String)~SecretSharingDotNet.Cryptography.Shares{`0}">
            <summary>
            Casts a <see cref="T:System.String"/> object to a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object.
            </summary>
            <param name="s">A <see cref="T:System.String"/> object representing two or more finite points separated by newline.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.op_Implicit(System.String[])~SecretSharingDotNet.Cryptography.Shares{`0}">
            <summary>
            Casts an array of <see cref="T:System.String"/> (representing two or more finite points) to a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object.
            </summary>
            <param name="s">An array of <see cref="T:System.String"/> representing two or more finite points.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.op_Explicit(SecretSharingDotNet.Cryptography.Shares{`0})~SecretSharingDotNet.Cryptography.FinitePoint{`0}[]">
            <summary>
            Casts a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object to an array of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items.
            </summary>
            <param name="shares">A <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> object.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> instance.
            </summary>
            <returns>A human readable list of shares separated by newlines</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.System#Collections#Generic#IEnumerable{SecretSharingDotNet#Cryptography#FinitePoint{TNumber}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:SecretSharingDotNet.Cryptography.SharesEnumerator`1"/> that iterates through the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <returns>An <see cref="T:SecretSharingDotNet.Cryptography.SharesEnumerator`1"/> that can be used to iterate through the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</returns>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection is read-only.
            </summary>
            <remarks>Currently, this property always returns <see langword="true"/>.</remarks>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.Count">
            <summary>
            Gets the number of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items contained in the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.Contains(SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            Determines whether the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection contains a specific <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/>.
            </summary>
            <param name="item">The <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to locate in the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.Clear">
            <summary>
            Removes all items from the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <remarks>This method is implemented. However this method does nothing as long as the property <see cref="P:SecretSharingDotNet.Cryptography.Shares`1.IsReadOnly"/> is
            set to <see langword="true"/>.</remarks>
            <exception cref="T:System.NotSupportedException">The <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection is read-only.</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.Add(SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            Adds an <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <param name="item">The <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to add to the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</param>
            <remarks>This method is implemented. However this method does nothing as long as the property <see cref="P:SecretSharingDotNet.Cryptography.Shares`1.IsReadOnly"/> is
            set to <see langword="true"/>.</remarks>
            <exception cref="T:System.NotSupportedException">The <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection is read-only.</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.Remove(SecretSharingDotNet.Cryptography.FinitePoint{`0})">
            <summary>
            Removes the first occurrence of a specific <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> from the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <param name="item">The <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> to remove from the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</param>
            <returns></returns>
            <remarks>This method is implemented. However this method does nothing as long as the property <see cref="P:SecretSharingDotNet.Cryptography.Shares`1.IsReadOnly"/> is
            set to <see langword="true"/>.</remarks>
            <exception cref="T:System.NotSupportedException">The <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection is read-only.</exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the items copied from <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            The  <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.Shares`1.CopyTo(SecretSharingDotNet.Cryptography.FinitePoint{`0}[],System.Int32)">
            <summary>
            Copies the items of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection to an array of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items,
            starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional array of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items that is the destination of the
            items copied from <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.Shares`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="T:SecretSharingDotNet.Cryptography.SharesEnumerator`1">
            <summary>
            Supports a iteration over <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <typeparam name="TNumber">The type of integer which is used by the <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items of the
            <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</typeparam>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.SharesEnumerator`1.shareList">
            <summary>
            Saves a list of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/>.
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Cryptography.SharesEnumerator`1.position">
            <summary>
            Saves the current of the enumerator
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.SharesEnumerator`1.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{SecretSharingDotNet.Cryptography.FinitePoint{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.SharesEnumerator`1"/> class.
            </summary>
            <param name="shares">A collection of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items representing the shares.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shares"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.SharesEnumerator`1.#ctor(System.Collections.ObjectModel.Collection{SecretSharingDotNet.Cryptography.FinitePoint{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Cryptography.SharesEnumerator`1"/> class.
            </summary>
            <param name="shares">A collection of <see cref="T:SecretSharingDotNet.Cryptography.FinitePoint`1"/> items representing the shares.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shares"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.SharesEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.SharesEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection.
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Cryptography.SharesEnumerator`1.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.SharesEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Cryptography.SharesEnumerator`1.Current">
            <summary>
            Gets the element in the <see cref="T:SecretSharingDotNet.Cryptography.Shares`1"/> collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:SecretSharingDotNet.Math.BigIntCalculator">
            <summary>
            <see cref="T:SecretSharingDotNet.Math.Calculator"/> implementation of <see cref="T:System.Numerics.BigInteger"/>
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.#ctor(System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> class.
            </summary>
            <param name="val">Numeric value</param>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> class.
            </summary>
            <param name="data">byte stream representation of numeric value</param>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.GreaterThan(System.Numerics.BigInteger)">
            <summary>
            This method represents the Greater Than operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is greater than the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.LowerThan(System.Numerics.BigInteger)">
            <summary>
            This method represents the Lower Than operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is less than the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.EqualOrGreaterThan(System.Numerics.BigInteger)">
            <summary>
            This method represents the Greater Than Or Equal To operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is greater than or equal to the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.EqualOrLowerThan(System.Numerics.BigInteger)">
            <summary>
            This method represents the Lower Than Or Equal To operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is less than or equal to the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Add(System.Numerics.BigInteger)">
            <summary>
            Adds the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance with the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.
            </summary>
            <param name="right">Right value to add (right summand).</param>
            <returns>The sum of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance and the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Subtract(System.Numerics.BigInteger)">
            <summary>
            Subtracts the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance with the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.
            </summary>
            <param name="right">Right value to subtract (subtrahend).</param>
            <returns>The difference of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance and the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Multiply(System.Numerics.BigInteger)">
            <summary>
            Multiplies the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance with the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.
            </summary>
            <param name="right">multiplicand</param>
            <returns>The product of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance and the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Divide(System.Numerics.BigInteger)">
            <summary>
            Divides the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance with the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.
            </summary>
            <param name="right">divisor</param>
            <returns>The quotient of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance and the <paramref name="right"/>
            <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Modulo(System.Numerics.BigInteger)">
            <summary>
            The modulo operation
            </summary>
            <param name="right">divisor</param>
            <returns>The remainder as <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Increment">
            <summary>
            The unary increment method increments this instance by 1.
            </summary>
            <returns>This <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance plus <see cref="P:SecretSharingDotNet.Math.Calculator`1.One"/></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Decrement">
            <summary>
            The unary decrement method decrements this instance by 1.
            </summary>
            <returns>This <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> instance minus <see cref="P:SecretSharingDotNet.Math.Calculator`1.One"/></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Abs">
            <summary>
            Returns the absolute value of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object.
            </summary>
            <returns>The absolute value of this instance.</returns>
            <remarks>This instance is greater than or equal to zero, the return value will be this instance.
            This instance is lower than zero, the return value will be this instance multiply with minus one.
            </remarks>
        </member>
        <member name="M:SecretSharingDotNet.Math.BigIntCalculator.Pow(System.Int32)">
            <summary>
            Raises this <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> value to the power of a specified value.
            </summary>
            <param name="expo">The exponent to raise this <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> value by.</param>
            <returns>The result of raising instance to the <paramref name="expo"/> power.</returns>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.ByteCount">
            <summary>
            Gets the number of elements of the byte representation of the <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.ByteRepresentation">
            <summary>
            Gets the byte representation of the <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.IsZero">
            <summary>
            Gets a value indicating whether or not the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object is zero (0).
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.IsOne">
            <summary>
            Gets a value indicating whether or not the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object is one (1).
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.IsEven">
            <summary>
            Gets a value indicating whether or not the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object is an even number.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.Sign">
            <summary>
            Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.BigIntCalculator.Sqrt">
            <summary>
            Returns the square root of the current <see cref="T:SecretSharingDotNet.Math.BigIntCalculator"/> object.
            </summary>
            <exception cref="T:System.ArithmeticException" accessor="get">NaN (value is lower than zero)</exception>
        </member>
        <member name="T:SecretSharingDotNet.Math.Calculator">
            <summary>
            This class represents the calculator strategy pattern to decouple Shamir's Secret Sharing
            implementation from the concrete numeric data type like <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
        </member>
        <member name="F:SecretSharingDotNet.Math.Calculator.ChildTypes">
            <summary>
            Saves a dictionary of number data types derived from the <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> class.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator.ByteCount">
            <summary>
            Gets the number of elements of the byte representation of the <see cref="T:SecretSharingDotNet.Math.Calculator"/> object.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator.ByteRepresentation">
            <summary>
            Gets the byte representation of the <see cref="T:SecretSharingDotNet.Math.Calculator"/> object.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator.IsZero">
            <summary>
            Gets a value indicating whether or not the current <see cref="T:SecretSharingDotNet.Math.Calculator"/> object is zero.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator.IsOne">
            <summary>
            Gets a value indicating whether or not the current <see cref="T:SecretSharingDotNet.Math.Calculator"/> object is one.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator.IsEven">
            <summary>
            Gets a value indicating whether or not the current <see cref="T:SecretSharingDotNet.Math.Calculator"/> object is an even number.
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator.Sign">
            <summary>
            Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:SecretSharingDotNet.Math.Calculator"/> object.
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator.Create(System.Byte[],System.Type)">
            <summary>
            Creates a new instance derived from the <see cref="T:SecretSharingDotNet.Math.Calculator"/> class.
            </summary>
            <param name="data">byte array representation of the <paramref name="numberType"/></param>
            <param name="numberType">Type of number</param>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator.GetDerivedNumberTypes">
            <summary>
            Returns a dictionary of number data types derived from the <see cref="T:SecretSharingDotNet.Math.Calculator"/> class.
            </summary>
            <returns></returns>
            <remarks>The key represents the integer data type of the derived calculator. The value represents the type of derived calculator.</remarks>
        </member>
        <member name="T:SecretSharingDotNet.Math.Calculator`1">
            <summary>
            This class represents the calculator strategy pattern to decouple Shamir's Secret Sharing
            implementation from the concrete numeric data type like BigInteger.
            </summary>
            <typeparam name="TNumber">Numeric data type</typeparam>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> class.
            </summary>
            <param name="val">Numeric value</param>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Add(`0)">
            <summary>
            Adds the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance with the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.
            </summary>
            <param name="right">Right value to add (right summand).</param>
            <returns>The sum of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance and the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Subtract(`0)">
            <summary>
            Subtracts the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance with the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.
            </summary>
            <param name="right">Right value to subtract (subtrahend).</param>
            <returns>The difference of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance and the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Multiply(`0)">
            <summary>
            Multiplies the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance with the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.
            </summary>
            <param name="right">multiplicand</param>
            <returns>The product of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance and the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Divide(`0)">
            <summary>
            Divides the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance with the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.
            </summary>
            <param name="right">divisor</param>
            <returns>The quotient of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance and the <paramref name="right"/> 
            <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Modulo(`0)">
            <summary>
            The modulo operation
            </summary>
            <param name="right">divisor</param>
            <returns>The remainder</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Increment">
            <summary>
            The unary increment method increments this instance by 1.
            </summary>
            <returns>This <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance plus <see cref="P:SecretSharingDotNet.Math.Calculator`1.One"/></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Decrement">
            <summary>
            The unary decrement method decrements this instance by 1.
            </summary>
            <returns>This <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance minus <see cref="P:SecretSharingDotNet.Math.Calculator`1.One"/></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Abs">
            <summary>
            Returns the absolute value of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> object.
            </summary>
            <returns>The absolute value of this instance.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Pow(System.Int32)">
            <summary>
            Power (mathematical)
            </summary>
            <param name="expo">The exponent.</param>
            <returns>The result of raising instance to the <paramref name="expo"/> power.</returns>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator`1.Sqrt">
            <summary>
            Returns the square root of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/>.
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.GreaterThan(`0)">
            <summary>
            This method represents the Greater Than operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is greater than the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.EqualOrGreaterThan(`0)">
            <summary>
            This method represents the Greater Than Or Equal To operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is greater than or equal to the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.LowerThan(`0)">
            <summary>
            This method represents the Lower Than operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is less than the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.EqualOrLowerThan(`0)">
            <summary>
            This method represents the Lower Than Or Equal To operator.
            </summary>
            <param name="right">right-hand operand</param>
            <returns>This method returns <see langword="true"/> if this instance is less than or equal to the <paramref name="right"/> instance, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_GreaterThan(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Greater than operator
            </summary>
            <param name="left">The 1st operand</param>
            <param name="right">The 2nd operand</param>
            <returns>Returns <see langword="true"/> if its 1st operand is greater than its 2nd operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_LessThan(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Less than operator
            </summary>
            <param name="left">The 1st operand</param>
            <param name="right">The 2nd operand</param>
            <returns>Returns <see langword="true"/> if its 1st operand is less than its 2nd operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_GreaterThanOrEqual(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Greater than or equal operator
            </summary>
            <param name="left">The 1st operand</param>
            <param name="right">The 2nd operand</param>
            <returns>Returns <see langword="true"/> if its 1st operand is greater than or equal to its 2nd operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_LessThanOrEqual(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Less than or equal operator
            </summary>
            <param name="left">The 1st operand</param>
            <param name="right">The 2nd operand</param>
            <returns>Returns <see langword="true"/> if its 1st operand is less than or equal to its 2nd operand, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Addition(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Addition operation
            </summary>
            <param name="left">The 1st summand</param>
            <param name="right">The 2nd summand</param>
            <returns>The sum</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Subtraction(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Subtraction operation
            </summary>
            <param name="left">The minuend</param>
            <param name="right">The subtrahend</param>
            <returns>The difference</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Multiply(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Multiplication operation
            </summary>
            <param name="left">multiplier</param>
            <param name="right">multiplicand</param>
            <returns>The product</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Division(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Divide operation
            </summary>
            <param name="left">dividend</param>
            <param name="right">divisor</param>
            <returns>The quotient</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Modulus(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Modulo operation
            </summary>
            <param name="left">dividend</param>
            <param name="right">divisor</param>
            <returns>The remainder</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Increment(SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Increment operator
            </summary>
            <param name="number">The operand</param>
            <returns>The unary increment operator increments the operand <paramref name="number"/> by 1</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Decrement(SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Decrement operator
            </summary>
            <param name="number">The operand</param>
            <returns>The unary decrement operator decrements the operand <paramref name="number"/> by 1.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Equality(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Equality operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>Returns <see langword="true"/> if its operands are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Inequality(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Inequality operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>Returns <see langword="true"/> if its operands are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Implicit(SecretSharingDotNet.Math.Calculator{`0})~`0">
            <summary>
            Casts the <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance to an <typeparamref name="TNumber"/> instance.
            </summary>
            <param name="calculatorInstance">A data type from basic class <see cref="T:SecretSharingDotNet.Math.Calculator`1"/>.</param>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.op_Implicit(`0)~SecretSharingDotNet.Math.Calculator{`0}">
            <summary>
            Casts the <typeparamref name="TNumber"/> instance to an <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.
            </summary>
            <param name="number">Numeric data type (An integer data type).</param>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Equals(SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Determines whether this instance and an<paramref name="other"/> specified <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance are equal.
            </summary>
            <param name="other">The <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance to compare</param>
            <returns><see langword="true"/> if the value of the <paramref name="other"/> parameter is the same as the value of this instance; otherwise <see langword="false"/>.
            If <paramref name="other"/> is <see langword="null"/>, the method returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> argument is a <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> object,
            and its value is equal to the value of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator`1.Value">
            <summary>
            Gets or sets the numeric value
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator`1.Zero">
            <summary>
            Gets a value that represents the number zero (0).
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator`1.One">
            <summary>
            Gets a value that represents the number one (1).
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.Calculator`1.Two">
            <summary>
            Gets a value that represents the number two (2).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.Clone">
            <summary>
            A shallow copy of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.Calculator`1.ToString">
            <summary>
            Converts the numeric value of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> object to its equivalent string representation.
            </summary>
            <returns>The string representation of the current <see cref="T:SecretSharingDotNet.Math.Calculator`1"/> value.</returns>
        </member>
        <member name="T:SecretSharingDotNet.Math.ExtendedEuclideanAlgorithm`1">
            <summary>
            Extended Euclidean algorithm implementation
            </summary>
            <typeparam name="TNumber">Numeric data type (An integer type)</typeparam>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedEuclideanAlgorithm`1.Compute(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Computes, in addition to the greatest common divisor of integers <paramref name="a"/> and <paramref name="b"/>, also the coefficients of Bézout's identity.
            </summary>
            <param name="a">An integer</param>
            <param name="b">An integer</param>
            <returns>For details: <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/></returns>
            <remarks>
            https://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Computation 
            https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Example
            </remarks>
        </member>
        <member name="T:SecretSharingDotNet.Math.ExtendedGcdResult`1">
            <summary>
            Represents the result of the extended greatest common divisor computation.
            </summary>
            <typeparam name="TNumber">Numeric data type</typeparam>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedGcdResult`1.#ctor(SecretSharingDotNet.Math.Calculator{`0},System.Collections.Generic.IList{SecretSharingDotNet.Math.Calculator{`0}},System.Collections.Generic.IList{SecretSharingDotNet.Math.Calculator{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> struct.
            </summary>
            <param name="gcd">Greatest common divisor</param>
            <param name="coefficients">Bézout coefficients</param>
            <param name="quotients">Quotients by the gcd</param>
        </member>
        <member name="P:SecretSharingDotNet.Math.ExtendedGcdResult`1.GreatestCommonDivisor">
            <summary>
            Gets the greatest common divisor
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.ExtendedGcdResult`1.BezoutCoefficients">
            <summary>
            Gets the Bézout coefficients 
            </summary>
        </member>
        <member name="P:SecretSharingDotNet.Math.ExtendedGcdResult`1.Quotients">
            <summary>
            Gets the quotients by the gcd
            </summary>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedGcdResult`1.op_Equality(SecretSharingDotNet.Math.ExtendedGcdResult{`0},SecretSharingDotNet.Math.ExtendedGcdResult{`0})">
            <summary>
            Equality operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>Returns <see langword="true"/> if its operands are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedGcdResult`1.op_Inequality(SecretSharingDotNet.Math.ExtendedGcdResult{`0},SecretSharingDotNet.Math.ExtendedGcdResult{`0})">
            <summary>
            Inequality operator
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>Returns <see langword="true"/> if its operands are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedGcdResult`1.Equals(SecretSharingDotNet.Math.ExtendedGcdResult{`0})">
            <summary>
            Determines whether this structure and an<paramref name="other"/> specified <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> structure have the same value.
            </summary>
            <param name="other">The <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> structure to compare</param>
            <returns><see langword="true"/> if the value of the <paramref name="other"/> parameter is the same as the value of this structure; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedGcdResult`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> structure.
            </summary>
            <param name="obj">The object to compare with the current <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> structure.</param>
            <returns><see langword="true"/> if the specified object is equal to the current <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> structure; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SecretSharingDotNet.Math.ExtendedGcdResult`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/> structure.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:SecretSharingDotNet.Math.IExtendedGcdAlgorithm`1">
            <summary>
            Provides mechanism to compute the extended greatest common divisor
            including Bézout coefficients.
            </summary>
            <typeparam name="TNumber">Numeric data type (An integer type)</typeparam>
        </member>
        <member name="M:SecretSharingDotNet.Math.IExtendedGcdAlgorithm`1.Compute(SecretSharingDotNet.Math.Calculator{`0},SecretSharingDotNet.Math.Calculator{`0})">
            <summary>
            Computes, in addition to the greatest common divisor of integers <paramref name="a"/> and <paramref name="b"/>, also the coefficients of Bézout's identity.
            </summary>
            <param name="a">An integer</param>
            <param name="b">An integer</param>
            <returns>For details: <see cref="T:SecretSharingDotNet.Math.ExtendedGcdResult`1"/></returns>
        </member>
    </members>
</doc>
